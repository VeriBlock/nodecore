// VeriBlock Blockchain Project
// Copyright 2017-2018 VeriBlock, Inc
// Copyright 2018-2019 Xenios SEZC
// All rights reserved.
// https://www.veriblock.org
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.

plugins {
    id "java"
    id "idea"
    id "application"
    id "com.google.protobuf"
    id 'org.jetbrains.kotlin.jvm'
}

configurations.all {
    // check for updates every build for changing modules
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    runtimeOnly "org.codehaus.groovy:groovy:2.4.12"

    implementation project(':veriblock-core')
    implementation project(':veriblock-shell')
    implementation project(":nodecore-grpc")

    implementation project(':altchain-pop-miner:core')
    implementation project(':altchain-sdk')

    implementation project(':altchain-plugins')

    implementation 'com.github.veriblock.alt-integration:mock-pop-mining:0.0.4'

    // Dependency Injection
    implementation "org.koin:koin-core:2.0.1"

    // Coroutines
    def coroutinesVersion = '1.2.3'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutinesVersion"

    // Http API
    def ktorVersion = '1.2.5'
    implementation "io.ktor:ktor-server-netty:$ktorVersion"
    implementation "io.ktor:ktor-locations:$ktorVersion"
    implementation "io.ktor:ktor-gson:$ktorVersion"
    implementation "com.github.nielsfalk:ktor-swagger:0.5.0"

    // Logging
    implementation 'io.github.microutils:kotlin-logging:1.6.26'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    runtimeOnly 'org.fusesource.jansi:jansi:1.18'

    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    implementation group: 'com.google.guava', name: 'guava', version: '26.0-jre'
    implementation group: 'com.diogonunes', name: 'JCDP', version: '2.0.3.1'
    implementation group: 'com.j256.ormlite', name: 'ormlite-core', version: '5.1'
    implementation group: 'com.j256.ormlite', name: 'ormlite-jdbc', version: '5.1'
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.23.1'

    testImplementation 'junit:junit:4.12'
}

protobuf {
    generatedFilesBaseDir = "$projectDir/src/generated"

    protoc {
        artifact = "com.google.protobuf:protoc:3.2.0"
    }
}

sourceSets {
    main {
        proto {}
        java {
            srcDir "$projectDir/src/main/kotlin"
            srcDir "$projectDir/src/generated/main/java"
        }
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

run {
    standardInput = System.in
    standardOutput = System.out

    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

jar {
    archiveName = "$applicationName-${prettyVersion()}.jar"
    manifest {
        attributes 'Name': 'veriblock/miners/pop',
                'Specification-Title': 'VeriBlock Proof-of-Proof (PoP) Miner',
                'Specification-Version': prettyVersion(),
                'Specification-Vendor': 'VeriBlock Foundation',
                'Implementation-Title': 'veriblock.miners.pop',
                'Implementation-Version': prettyVersion(),
                'Implementation-Vendor': 'VeriBlock Foundation'
    }
}

startScripts {
    windowsStartScriptGenerator.template = resources.text.fromFile("windowsStartScript.txt")
}

tasks.withType(CreateStartScripts).each { task ->
    task.doLast {
        // This will replace the long classpath string (which contains a reference to every single lib on the project)
        // for a simple lib\* (which will load all the libs on the project without reference them directly)
        task.windowsScript.write task.windowsScript.text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, { "${it[1]}*" })
    }
}

applicationName = 'veriblock-alt-pop'
mainClassName = 'org.veriblock.miners.pop.ProgramKt'

distZip.archiveName = "$applicationName-${prettyVersion()}.zip"
distTar.archiveName = "$applicationName-${prettyVersion()}.tar"

apply plugin: 'jacoco'

jacocoTestReport {
    getAdditionalSourceDirs() from files(project.sourceSets.main.allJava.srcDirs)
    getSourceDirectories() from files(project.sourceSets.main.allSource.srcDirs)
    getClassDirectories() from files(project.sourceSets.main.output)

    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }
}
