plugins {
    id("java")
    id("org.jetbrains.kotlin.jvm")
    id("idea")
    id("application")
    id("com.google.protobuf")
}

configurations.all {
    // check for updates every build for changing modules
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
    // Using compile(in all dependencies because of the jar's classpath reference)

    // Kotlin
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")

    compile("org.codehaus.groovy:groovy:2.4.12")

    compile(project(":nodecore-ucp"))
    compile(project(":nodecore-grpc"))
    compile(project(":veriblock-shell"))

    compile(group: "ch.qos.logback", name: "logback-classic", version: "1.2.3")
    compile(group: "commons-cli", name: "commons-cli", version: "1.4")
    compile(group: "org.apache.commons", name: "commons-lang3", version: "3.0")
    compile(group: "com.google.protobuf", name: "protobuf-gradle-plugin", version: "0.8.6")
    compile(group: "com.google.code.gson", name: "gson", version: "2.8.2")
    compile(group: "org.reflections", name: "reflections", version: "0.9.11")
    compile(group: "com.diogonunes", name: "JCDP", version: "2.0.3.1")
    compile(group: "org.quartz-scheduler", name: "quartz", version: "2.2.1")
    compile(group: "org.quartz-scheduler", name: "quartz-jobs", version: "2.2.1")
    compile(group: "com.j256.ormlite", name: "ormlite-core", version: "5.1")
    compile(group: "com.j256.ormlite", name: "ormlite-jdbc", version: "5.1")
    compile(group: "org.xerial", name: "sqlite-jdbc", version: "3.23.1")
    compile(group: "org.bitcoinj", name: "bitcoinj-core", version: "0.15.6")

    // Dependency Injection
    compile("org.koin:koin-core:2.0.1")
    compile("org.koin:koin-java:2.0.1")

    // Coroutines
    def coroutinesVersion = "1.2.3"
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutinesVersion")

    // Http API
    def ktorVersion = "1.2.5"
    compile("io.ktor:ktor-server-netty:$ktorVersion")
    compile("io.ktor:ktor-locations:$ktorVersion")
    compile("io.ktor:ktor-gson:$ktorVersion")
    // Swagger integration, expecting an official integration to be released soon
    compile("com.github.nielsfalk:ktor-swagger:0.5.0")

    // Logging
    compile("io.github.microutils:kotlin-logging:1.6.25")

    // Test
    testCompile("junit:junit:4.12")
    testCompile("org.mockito:mockito-core:2.+")
    // Better mocks
    testImplementation("io.mockk:mockk:1.9.3")
    // Better testing framework
    testCompile("io.kotlintest:kotlintest-runner-junit5:3.4.2")
    // Better assertions
    testCompile("io.kotlintest:kotlintest-assertions:3.4.2")
}

protobuf {
    generatedFilesBaseDir = "$projectDir/src/generated"

    protoc {
        artifact = "com.google.protobuf:protoc:3.6.1"
    }
}

sourceSets {
    main {
        proto {}
        java {
            srcDir "$projectDir/src/main/java"
            srcDir "$projectDir/src/generated/main/java"
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = "full"
    }
}

run {
    standardInput = System.in
    standardOutput = System.out
    
    //if (System.getProperty("DEBUG", "false") == "true") {
    //    jvmArgs "-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009"
    //}

    // example: -PappArgs="["-Dpeer.host=test.foo.com", "-Dpeer.port=6501"]"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

ext {
    group = "veriblock"
    println("archiveBaseName: $archivesBaseName")
    println("branch = ${release.grgit.branch.current.name}")
}

jar {
    archiveName = "$applicationName-${prettyVersion()}.jar"
    manifest {
        attributes "Name": "nodecore/miners/pop",
                "Specification-Title": "VeriBlock Proof-of-Proof (PoP) Miner",
                "Specification-Version": prettyVersion(),
                "Specification-Vendor": "VeriBlock Foundation",
                "Implementation-Title": "nodecore.miners.pop",
                "Implementation-Version": prettyVersion(),
                "Implementation-Vendor": "VeriBlock Foundation",
                "Class-Path": configurations.compile.collect { it.getName() }.join(" ")
    }
}

applicationName = "nodecore-pop"
mainClassName = "nodecore.miners.pop.ProgramKt"

distZip.archiveName = "$applicationName-${prettyVersion()}.zip"
distTar.archiveName = "$applicationName-${prettyVersion()}.tar"

startScripts {
    dependsOn jar

    classpath = files(jar.archivePath)
    windowsStartScriptGenerator.template = resources.text.fromFile("windowsStartScript.txt")
}

apply plugin: "jacoco"

jacocoTestReport {
    getAdditionalSourceDirs() from files(project.sourceSets.main.allJava.srcDirs)
    getSourceDirectories() from files(project.sourceSets.main.allSource.srcDirs)
    getClassDirectories() from files(project.sourceSets.main.output)

    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }
}
