plugins {
    id "java"
    id "idea"
    id "java-library"
    id "com.google.protobuf"
}


configurations.all {
    // check for updates every build for changing modules
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation project(':veriblock-core')
    implementation project(':veriblock-extensions')
    implementation project(':nodecore-grpc')
    implementation project(':nodecore-p2p')

    implementation "com.github.veriblock.alt-integration:core:0.0.6"

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.28'

    testImplementation 'junit:junit:4.12'
    runtime "org.codehaus.groovy:groovy:2.4.12"
    compile 'ch.qos.logback:logback-classic:1.2.3'

    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.28.0'
    compile group: 'com.sparkjava', name: 'spark-core', version: '2.8.0'

    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.6.1'
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.6.1'

    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.14'

    //veriblock-core and nodecore-grpc plus their dependencies
    compile fileTree(dir: "$projectDir/../lib/", include: '*.jar')

    //Guice
    compile group: 'com.google.inject', name: 'guice', version: '4.2.2'
    compile group: 'com.google.inject.extensions', name: 'guice-multibindings', version: '4.2.2'
    compile group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '4.2.2'

    // required if you want to use Mockito for unit tests
    testCompile 'org.mockito:mockito-core:2.7.22'
}

protobuf {
    generatedFilesBaseDir = "$projectDir/src/generated"
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.5.1'
    }
}

sourceSets {
    main {
        proto {}
        java {
            srcDir "$projectDir/src/main"
            srcDir "$projectDir/src/generated/main/java"
        }
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

jar {
    manifest {
        attributes 'Name': 'veriblock/lite',
                'Specification-Title': 'VeriBlock Lite Toolkit',
                'Specification-Version': version.toString().split(/-/)[0],
                'Specification-Vendor': 'VeriBlock Foundation',
                'Implementation-Title': 'veriblock.lite',
                'Implementation-Version': version,
                'Implementation-Vendor': 'VeriBlock Foundation'
    }
}

apply plugin: 'jacoco'

jacocoTestReport {
    getAdditionalSourceDirs() from files(project.sourceSets.main.allJava.srcDirs)
    getSourceDirectories() from files(project.sourceSets.main.allSource.srcDirs)
    getClassDirectories() from files(project.sourceSets.main.output)

    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }
}
