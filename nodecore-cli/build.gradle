plugins {
    id("java")
    id("org.jetbrains.kotlin.jvm")
    id("idea")
    id("application")
}

configurations.all {
    // check for updates every build for changing modules
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
    implementation(project(":veriblock-core"))
    implementation(project(":nodecore-grpc"))
    implementation(project(":veriblock-shell"))
    implementation(project(":nodecore-spv"))

    implementation("ch.qos.logback:logback-classic:1.2.3")
    implementation("commons-cli:commons-cli:1.4")
    implementation("commons-io:commons-io:2.5")

    // Dependency Injection
    implementation("org.koin:koin-core:1.0.1")

    implementation("joda-time:joda-time:2.9.9")
    implementation("org.reflections:reflections:0.9.11")
    implementation("com.diogonunes:JCDP:2.0.3.1")
    implementation("com.google.code.gson:gson:2.8.2")
    implementation("org.jline:jline:3.9.0")
    implementation("org.jline:jline-terminal:3.9.0")
    implementation("org.jline:jline-terminal-jansi:3.9.0")
    implementation("io.netty:netty-tcnative-boringssl-static:2.0.7.Final")
    implementation("com.opencsv:opencsv:4.3.2")

    // Testing
    testImplementation("junit:junit:4.12")
}

test {
    testLogging {
        exceptionFormat = "full"
    }
}

run {
    standardInput = System.in
    standardOutput = System.out

    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

ext {
    group = "veriblock"
    println("archiveBaseName: $archivesBaseName")
    println("branch = ${release.grgit.branch.current.name}")
}

jar {
    archiveName = "$applicationName-${prettyVersion()}.jar"
    manifest {
        attributes "Name": "nodecore/cli",
                "Specification-Title": "NodeCore Command-Line Interface",
                "Specification-Version": prettyVersion(),
                "Specification-Vendor": "VeriBlock Foundation",
                "Implementation-Title": "nodecore.cli",
                "Implementation-Version": prettyVersion(),
                "Implementation-Vendor": "VeriBlock Foundation"
    }
}

applicationName = "nodecore-cli"
mainClassName = "nodecore.cli.ProgramKt"

distZip.archiveName = "$applicationName-${prettyVersion()}.zip"
distTar.archiveName = "$applicationName-${prettyVersion()}.tar"

startScripts {
    windowsStartScriptGenerator.template = resources.text.fromFile("windowsStartScript.txt")
}

tasks.withType(CreateStartScripts).each { task ->
    task.doLast {
        // This will replace the long classpath string (which contains a reference to every single lib on the project)
        // for a simple lib\* (which will load all the libs on the project without reference them directly)
        task.windowsScript.write task.windowsScript.text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, { "${it[1]}*" })
    }
}

apply plugin: "jacoco"

jacocoTestReport {
    getAdditionalSourceDirs() from files(project.sourceSets.main.allJava.srcDirs)
    getSourceDirectories() from files(project.sourceSets.main.allSource.srcDirs)
    getClassDirectories() from files(project.sourceSets.main.output)

    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }
}
