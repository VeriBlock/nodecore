// VeriBlock NodeCore
// Copyright 2017-2018 VeriBlock, Inc.
// All rights reserved.
// https://www.veriblock.org
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.

syntax = "proto3";

package core;

import "google/protobuf/descriptor.proto";

extend google.protobuf.FieldOptions {
    bool hex_encoded = 50000;
    bool address_encoded = 50001;
    bool ascii_encoded = 50002;
    bool utf8_encoded = 50003;
}

option java_package = "nodecore.api.grpc";
option java_outer_classname = "VeriBlockRpc";
option java_multiple_files = true;

message RpcAddressBalance {
    bytes address = 1 [(address_encoded)=true];
    int64 unlocked_amount = 2;
    int64 locked_amount = 3;
    int64 total_amount = 4;
}

message RpcOutput {
    bytes address = 1 [(address_encoded)=true];
    int64 amount = 2;
}

message RpcPaging {
    int32 page_number = 1;
    int32 results_per_page = 2;
}

message RpcNumericFilter {
    enum Operator {
        EQUAL = 0;
        LESS_THAN = 1;
        LESS_THAN_OR_EQUAL = 2;
        GREATER_THAN = 3;
        GREATER_THAN_OR_EQUAL = 4;
        BETWEEN = 5;
    }
    Operator operator = 1;
    sint64 value = 2;
    sint64 secondary_value = 3;
}

message RpcEndpoint {
    string address = 1;
    int32 port = 2;
}

message RpcMultisigSlot {
    bool populated = 1;
    bytes signature = 2 [(hex_encoded)=true];
    bytes public_key = 3 [(hex_encoded)=true];
    bytes owner_address = 4 [(address_encoded)=true];
}

message RpcMultisigBundle {
    repeated RpcMultisigSlot slots = 1;
}

message RpcSignedTransaction {
    bytes signature = 1 [(hex_encoded)=true];
    bytes public_key = 2 [(hex_encoded)=true];
    int64 signature_index = 3;
    RpcTransaction transaction = 4;
}

message RpcSignedTransactionInfo {
    bytes signature = 1 [(hex_encoded)=true];
    bytes public_key = 2 [(hex_encoded)=true];
    int64 signature_index = 3;
    RpcTransactionInfo transaction = 4;
}

message RpcSignedMultisigTransaction {
    RpcMultisigBundle signature_bundle = 1;
    RpcTransaction transaction = 2;
    int64 signature_index = 3;
}

message RpcSignedMultisigTransactionInfo {
    RpcMultisigBundle signature_bundle = 1;
    RpcTransactionInfo transaction = 2;
    int64 signature_index = 3;
}

message RpcCoinbaseTransaction {
    int64 pow_coinbase_amount = 1;
    int64 pop_coinbase_amount = 2;
    int64 pow_fee_share = 3;
    int64 pop_fee_share = 4;
    repeated RpcOutput pow_outputs = 5;
    repeated RpcOutput pop_outputs = 6;
    int32 block_height = 7;
    bytes tx_id = 8 [(hex_encoded)=true];
}

message RpcBitcoinBlockHeader {
    bytes header = 1 [(hex_encoded)=true];
}

message RpcPopEndorsementInfo {
    bytes miner_address = 1 [(address_encoded)=true];
    bytes endorsed_veriblock_block_hash = 2 [(hex_encoded)=true];
    bytes contained_in_veriblock_block_hash = 3 [(hex_encoded)=true];
    bytes veriblock_tx_id = 4 [(hex_encoded)=true];
    bytes bitcoin_transaction = 5 [(hex_encoded)=true];
    bytes bitcoin_tx_id = 6 [(hex_encoded)=true];
    bytes bitcoin_block_header = 7 [(hex_encoded)=true];
    bytes bitcoin_block_header_hash = 8 [(hex_encoded)=true];
    int64 reward = 9;
    bool finalized = 10;
    int32 endorsed_block_number = 11;
}

message RpcStandardAddress {
    bytes standard_address = 1 [(address_encoded)=true];
}

message RpcTroubleshootPopTransactionsRequest {
    bool only_failures = 1;
    int32 search_length = 2;
    oneof search_paramater {
        RpcAddressSet addresses = 3;
        RpcTransactionSet transactions = 4;
    }
}

message RpcAddressSet {
    repeated bytes addresses = 1 [(address_encoded)=true];
}

message RpcAddressUpdateDelta {
    bytes address = 1 [(address_encoded)=true];
    int32 number = 2;
    int32 tx_count = 3;
}

message RpcAddressUpdateDeltaTable {
    repeated RpcAddressUpdateDelta address_update_deltas = 1;
}

message RpcTransactionSet {
    repeated bytes txids = 1 [(hex_encoded)=true];
}

message RpcTroubleshootPopTransactionsReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcPopTransactionProblemReport popProblemReports = 3;
}

message RpcPopTransactionProblemReport {
    bytes address = 1 [(address_encoded)=true];
    bytes txid = 2 [(hex_encoded)=true];
    bytes endorsed_vbk_block_hash = 3 [(hex_encoded)=true];
    int32 endorsed_vbk_block_index = 4;
    bytes included_in_vbk_block_hash = 5 [(hex_encoded)=true];
    int32 included_in_vbk_block_index = 6;
    bytes pop_payout_vbk_block_hash = 7 [(hex_encoded)=true];
    int32 pop_payout_vbk_block_index = 8;
    bool paid_out_in_pop_payout_vbk_block = 9;
    int64 pop_payout_vbk_amount = 10;
    bytes bitcoin_txid = 11 [(hex_encoded)=true];
    bytes included_in_btc_block_hash = 12 [(hex_encoded)=true];
    int32 included_in_btc_block_index = 13;
    bool endorsed_vbk_block_in_main_chain = 14;
    bool included_in_vbk_block_in_main_chain = 15;
    bool included_in_btc_block_in_main_chain = 16;
    int32 first_btc_block_of_equivalent_pop_endorsements_index = 17;
    int32 current_block_height = 18;
}

message RpcGetPopEndorsementsInfoRequest {
    int32 search_length = 1;
    repeated RpcStandardAddress addresses = 2;
}

message RpcGetPopEndorsementsInfoReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcPopEndorsementInfo pop_endorsements = 3;
}

message RpcGetPopRewardEstimatesRequest {
    int32 keystones_to_search = 1;
}

message RpcRewardEstimate {
    enum Round {
        ROUND_1 = 0;
        ROUND_2 = 1;
        ROUND_3 = 2;
        ROUND_3_SPECIAL = 3;
        ROUND_4 = 4;
    }

    Round round = 1;
    int64 block_number = 2;
    int64 reward_per_point = 3;
}

message RpcGetPopRewardEstimatesReply {
    bool success = 1;
    repeated RpcResult results = 2;

    repeated RpcRewardEstimate reward_estimates = 3;
}

message RpcGetProtectedChildrenRequest {
    int32 search_length = 1;
    bytes veriblock_block_hash = 2 [(hex_encoded)=true];
}

message RpcGetProtectedChildrenReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcPopEndorsementInfo pop_endorsements = 3;
}

message RpcGetProtectingParentsRequest {
    int32 search_length = 1;
    bytes veriblock_block_hash = 2 [(hex_encoded)=true];
}

message RpcGetProtectingParentsReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcPopEndorsementInfo pop_endorsements = 3;
}

message RpcLedgerValue {
    int64 available_atomic_units = 1;
    int64 frozen_atomic_units = 2;
    int64 signature_index = 3;
}

message RpcLedgerProofNode {
    bytes route = 1;
    bytes left_contiguous_child_hashes = 2;
    bytes right_contiguous_child_hashes = 3;
    RpcLedgerValue ledgerValue = 4;
}

message RpcLedgerProofOfExistence {
    repeated RpcLedgerProofNode vertical_proof_layers = 1;
}

message RpcLedgerProofOfNonexistence {
    repeated RpcLedgerProofNode vertical_proof_layers = 1;
    repeated RpcLedgerProofNode horizontal_proof_layers = 2;
    bytes address = 3 [(address_encoded)=true];
}

message RpcLedgerProof {
    oneof proof {
        RpcLedgerProofOfExistence proof_of_existence = 1;
        RpcLedgerProofOfNonexistence proof_of_nonexistence = 2;
    }
}

message RpcLedgerProofWithContext {
    RpcLedgerProof ledger_proof = 1;
    repeated bytes ledger_proof_context_layers = 2;
    RpcBlockHeader block_header = 3;
}

message RpcTransaction {
    enum Type {
        ZERO_UNUSED = 0;
        STANDARD = 1;
        PROOF_OF_PROOF = 2;
        MULTISIG = 3;
    }

    Type type = 1;
    bytes source_address = 2 [(address_encoded)=true];
    int64 source_amount = 3;
    repeated RpcOutput outputs = 4;
    int64 transaction_fee = 5;
    bytes data = 7 [(hex_encoded)=true];
    bytes bitcoin_transaction = 10 [(hex_encoded)=true];
    bytes endorsed_block_header = 11 [(hex_encoded)=true];
    RpcBitcoinBlockHeader bitcoin_block_header_of_proof = 12;
    string merkle_path = 13;
    repeated RpcBitcoinBlockHeader context_bitcoin_block_headers = 14;
    int32 timestamp = 15;
    int32 size = 16;
    bytes tx_id = 17 [(hex_encoded)=true];
}

message RpcUnsignedMultisigTransactionWithIndex {
    RpcTransaction unsigned_multisig_tansaction = 1;
    int64 signature_index = 2;
}

message RpcTransactionInfoUnion {
    oneof transaction {
        RpcTransactionInfo unsigned = 1;
        RpcSignedTransactionInfo signed = 2;
        RpcSignedMultisigTransactionInfo signed_multisig = 3;
    }
}

message RpcTransactionUnion {
    oneof transaction {
        RpcTransaction unsigned = 1;
        RpcSignedTransaction signed = 2;
        RpcSignedMultisigTransaction signed_multisig = 3;
    }
}

message RpcVBKTransactionWithContext {
    RpcVBKMerklePath merkle_path = 1;
    oneof transaction {
        RpcSignedTransaction signed_transaction = 2;
        RpcSignedMultisigTransaction signed_multisig_transaction = 3;
    }
}

message RpcVBKMerklePath {
    repeated bytes layers = 1 [(hex_encoded)=true];
    bytes bottom_data = 2 [(hex_encoded)=true];
    int32 bottom_data_index = 3;
}

message RpcTransactionMeta {
    enum Status {
        UNKNOWN = 0;
        PENDING = 1;
        CONFIRMED = 2;
        DEAD = 3;
    }

    bytes tx_id = 1 [(hex_encoded)=true];
    bytes block_header = 2 [(hex_encoded)=true];
    repeated bytes appears_in = 3 [(hex_encoded)=true];
    int32 confirmations = 4;
    Status status = 5;
}

message RpcWalletTransaction {
    enum Type {
        NOT_SET = 0;
        POW_COINBASE = 1;
        POP_COINBASE = 2;
        BOTH_COINBASE = 3;
        SENT = 4;
        RECEIVED = 5;
        SENT_AND_RECEIVED = 6;
        POP = 7;
    }

    bytes tx_id = 1 [(hex_encoded)=true];
    bytes address = 2 [(address_encoded)=true];
    int32 timestamp = 3;
    Type type = 4;
    sint64 net_amount = 5;
    RpcOutput input = 6;
    repeated RpcOutput outputs = 7;
    RpcTransactionMeta meta = 8;
}

message RpcPopDatastore {
    bytes datastore_hash = 1 [(hex_encoded)=true];
    bytes endorsed_veriblock_headers_hash = 2 [(hex_encoded)=true];
    bytes endorsed_altchain_headers_hash = 3 [(hex_encoded)=true];
    repeated RpcBitcoinHeaderVeriBlockEndorsementCountsPair veriblock_header_endorsements = 4;
    repeated RpcAltchainIdAltchainHeaderEndorsementCountsPair altchain_header_endorsements = 5;
}

message RpcAltchainIdAltchainHeaderEndorsementCountsPair {
    int64 altchain_identifier = 1;
    repeated RpcAltchainHeaderEndorsementCountPair altchain_header_endorsement_count_pairs = 2;
}

message RpcBitcoinHeaderVeriBlockEndorsementCountsPair {
    bytes bitcoin_header = 1 [(hex_encoded)=true];
    repeated RpcVeriBlockHeaderEndorsementCountPair veriblock_header_endorsement_count_pairs = 2;
}

message RpcVeriBlockHeaderEndorsementCountPair {
    bytes veriblock_header = 1 [(hex_encoded)=true];
    int32 endorsement_count = 2;
}

message RpcAltchainHeaderEndorsementCountPair {
    bytes altchain_header = 1 [(hex_encoded)=true];
    int32 endorsement_count = 2;
}

message RpcAltchainPopEndorsement {
    int64 identifier = 1;
    bytes header = 2;
    bytes contextInfo = 3;
    bytes payoutInfo = 4;
    bytes rawData = 5;
}

message RpcBlockFeeTable {
    int64 pop_fee_share = 1;
}

message RpcBlockContentMetapackage {
    RpcCoinbaseTransaction coinbase_transaction = 1;
    RpcPopDatastore pop_datastore = 2;
    bytes miner_comment = 3 [(ascii_encoded)=true];
    bytes ledger_hash = 4 [(hex_encoded)=true];
    sint64 extra_nonce = 5;
    bytes hash = 6 [(hex_encoded)=true];
    RpcBlockFeeTable block_fee_table = 7;
}

message RpcBlockSummary {
    int32 number = 1;
    int32 timestamp = 2;
    bytes hash = 3 [(hex_encoded)=true];
    bytes previous_hash = 4 [(hex_encoded)=true];
    bytes second_previous_hash = 5 [(hex_encoded)=true];
    bytes third_previous_hash = 6 [(hex_encoded)=true];
    fixed64 decoded_difficulty = 7;
    sint64 winning_nonce = 8;
    int32 num_regular_transactions = 9;
    int32 num_pop_transactions = 10;
    int64 total_fees = 11;
    int64 pow_coinbase_reward = 12;
    int64 pop_coinbase_reward = 13;
    int32 size = 14;
    bytes ledger_hash = 15 [(hex_encoded)=true];
    bytes miner_comment = 16 [(ascii_encoded)=true];
    int32 version = 17;
    bytes merkle_root = 18 [(hex_encoded)=true];
}

message RpcLightBlockSummary {
    int32 number = 1;
    int32 timestamp = 2;
    bytes hash = 3 [(hex_encoded)=true];
    bytes previous_hash = 4 [(hex_encoded)=true];
    bytes second_previous_hash = 5 [(hex_encoded)=true];
    bytes third_previous_hash = 6 [(hex_encoded)=true];
    fixed64 decoded_difficulty = 7;
    sint64 winning_nonce = 8;
    int32 num_known_regular_transactions = 9;
    int32 num_pop_transactions = 10;
    int64 pow_coinbase_reward = 11;
    int64 pop_coinbase_reward = 12;
    bytes ledger_hash = 13 [(hex_encoded)=true];
    bytes miner_comment = 14 [(ascii_encoded)=true];
    bytes normal_transaction_merkle_root = 15 [(hex_encoded)=true];
    int32 version = 16;
    bytes merkle_root = 17 [(hex_encoded)=true];
}

message RpcBlock {
    int32 number = 1;
    int32 timestamp = 2;
    bytes hash = 3 [(hex_encoded)=true];
    bytes previous_hash = 4 [(hex_encoded)=true];
    bytes second_previous_hash = 5 [(hex_encoded)=true];
    bytes third_previous_hash = 6 [(hex_encoded)=true];
    int32 encoded_difficulty = 7;
    sint64 winning_nonce = 8;
    repeated RpcTransactionUnion regular_transactions = 9;
    repeated RpcTransactionUnion pop_transactions = 10;
    int64 total_fees = 11;
    int64 pow_coinbase_reward = 12;
    int64 pop_coinbase_reward = 13;
    repeated bytes bitcoin_block_headers = 14 [(hex_encoded)=true];
    RpcBlockContentMetapackage block_content_metapackage = 15;
    int32 size = 16;
    int32 version = 17;
    bytes merkle_root = 18 [(hex_encoded)=true];
}

message RpcBlockHeader {
    bytes header = 1 [(hex_encoded)=true];
    bytes hash = 2 [(hex_encoded)=true];
}

message RpcFilteredBlock {
    int32 number = 1;
    int32 version = 2;
    bytes previous_hash = 3 [(hex_encoded)=true];
    bytes second_previous_hash = 4 [(hex_encoded)=true];
    bytes third_previous_hash = 5 [(hex_encoded)=true];
    bytes merkle_root = 6;
    int32 timestamp = 7;
    int32 difficulty = 8;
    sint64 nonce = 9;
    int32 total_regular_transactions = 10;
    int32 total_pop_transactions = 11;
    repeated bytes merkle_hashes = 12 [(hex_encoded)=true];
    bytes merkle_flags = 13 [(hex_encoded)=true];
}

message RpcLightVBKBlock {
    int32 number = 1;
    int32 timestamp = 2;
    bytes hash = 3 [(hex_encoded)=true];
    bytes previous_hash = 4 [(hex_encoded)=true];
    bytes second_previous_hash = 5 [(hex_encoded)=true];
    bytes third_previous_hash = 6 [(hex_encoded)=true];
    int32 encoded_difficulty = 7;
    sint64 winning_nonce = 8;
    repeated RpcVBKTransactionWithContext known_regular_transactions = 9;
    repeated RpcTransactionUnion pop_transactions = 10;
    int64 pow_coinbase_reward = 11;
    int64 pop_coinbase_reward = 12;
    repeated bytes bitcoin_block_headers = 13 [(hex_encoded)=true];
    RpcBlockContentMetapackage block_content_metapackage = 14;
    bytes normal_transaction_merkle_root = 15 [(hex_encoded)=true];
    int32 version = 16;
    bytes merkle_root = 17 [(hex_encoded)=true];
}

message RpcBlockFilter {
    oneof filters {
        bytes hash = 1 [(hex_encoded)=true];
        int32 index = 2;
        int32 number = 3;
    }
}

message RpcGetBlocksRequest {
    int32 search_length = 1;
    repeated RpcBlockFilter filters = 2;
}

message RpcResult {
    bool error = 1;
    string code = 2;
    string message = 3;
    string details = 4;
}

message RpcProtocolReply {
    bool success = 1;
    repeated RpcResult results = 2;
}

message RpcGetBlocksReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcBlock blocks = 3;
}

message RpcBackupWalletRequest {
    bytes target_location = 1 [(ascii_encoded)=true];
}

message RpcBackupWalletReply {
    bool success = 1;
    repeated RpcResult results = 2;
}

message RpcImportWalletRequest {
    bytes source_location = 1 [(ascii_encoded)=true];
    string passphrase = 2;
}

message RpcImportWalletReply {
    bool success = 1;
    repeated RpcResult results = 2;
}

// --------------------------------------------------------------------

message RpcAnnounce {
    bool reply = 1;
    RpcNodeInfo node_info = 2;
}

message RpcNodeInfo {
    string address = 1;
    int32 port = 2;
    string application = 3;
    int32 protocol_version = 4;
    string platform = 5;
    int32 start_timestamp = 6;
    string id = 7;
    bool share = 8;
    int64 capabilities = 9;
}

message RpcAddBlocksRequest {
    repeated RpcBlock blocks = 1;
}

message RpcBlockInfo {
    int32 number = 1;
    bytes hash = 2 [(hex_encoded)=true];
}

message RpcAddTransactionsReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated bytes tx_ids = 3 [(hex_encoded)=true];
}

message RpcHeartbeat {
    RpcBlockInfo block = 1;
}

message RpcBlockQuery {
    RpcBlockInfo block = 1;
    string id = 2;
}

message RpcBlockQueryReply {
    bool matched = 1;
    RpcBlockInfo block = 2;
    string id = 3;
}

message RpcSyncRequest {
    int32 starting_block_height = 1;
    bool sync_transactions = 2;
}

message RpcNetworkInfoRequest {
}

message RpcNetworkInfoReply {
    repeated RpcNodeInfo available_nodes = 1;
}

message RpcLedgerProofRequest {
    repeated bytes addresses = 1 [(address_encoded)=true];
}

message RpcLedgerProofReply {
    enum Status {
        ADDRESS_EXISTS = 0;
        ADDRESS_DOES_NOT_EXIST = 1;
        ADDRESS_IS_INVALID = 2;
    }

    message LedgerProofResult {
        bytes address = 1 [(address_encoded)=true];
        Status result = 2;
        RpcLedgerProofWithContext ledger_proof_with_context = 3;
    }

    repeated LedgerProofResult proofs = 1;
}

message RpcBlockHeadersPaginatedRequest {
    int32 offset = 1;
    int32 size = 2;
}

message RpcBlockHeadersByHashesRequest {
    repeated RpcBlockInfo blocks = 1;
}

message RpcBlockHeadersRequest {
    oneof request {
        RpcBlockHeadersPaginatedRequest paginated_request = 1;
        RpcBlockHeadersByHashesRequest hashes_request = 2;
    }
}

message RpcBlockHeadersReply {
    repeated RpcBlockHeader blockHeaders = 1;
}

message RpcAcknowledgement {
    string message_id = 1;
}

message RpcAdvertiseBlocks {
    repeated RpcBlockHeader headers = 1;
}

message RpcTransactionAnnounce {
    enum Type {
        NORMAL = 0;
        PROOF_OF_PROOF = 1;
    }

    Type type = 1;
    bytes tx_id = 2 [(hex_encoded)=true];
}

message RpcAdvertiseTransaction {
    repeated RpcTransactionAnnounce transactions = 1;
}

message RpcBlockRequest {
    repeated RpcBlockHeader headers = 1;
}

message RpcTransactionRequest {
    repeated RpcTransactionAnnounce transactions = 1;
}

message RpcKeystoneQuery {
    repeated RpcBlockHeader headers = 1;
}

message RpcNotFound {
    enum Type {
        BLOCK = 0;
        TX = 1;
    }
    Type type = 1;
    bytes id = 2;
}

message RpcCreateFilter {
    bytes filter = 1;
    int32 hash_iterations = 2;
    int32 tweak = 3;
    int32 flags = 4;
}

message RpcAddFilter {
    bytes data = 1;
}

message RpcClearFilter {

}

message RpcEvent {
    oneof results {
        RpcBlock block = 1;
        RpcTransactionUnion transaction = 2;
        RpcAnnounce announce = 3;
        RpcHeartbeat heartbeat = 4;
        RpcBlockQuery block_query = 5;
        RpcBlockQueryReply block_query_reply = 6;
        RpcNetworkInfoRequest network_info_request = 8;
        RpcNetworkInfoReply network_info_reply = 9;
        RpcAcknowledgement acknowledgement = 10;
        RpcAdvertiseBlocks advertise_blocks = 13;
        RpcBlockRequest block_request = 14;
        RpcKeystoneQuery keystone_query = 15;
        RpcAdvertiseTransaction advertise_tx = 16;
        RpcTransactionRequest tx_request = 17;
        RpcNotFound not_found = 18;
        RpcCreateFilter create_filter = 19;
        RpcAddFilter add_filter = 20;
        RpcClearFilter clear_filter = 21;
        RpcBlockRequest filtered_block_request = 22;
        RpcFilteredBlock filtered_block = 23;
        RpcLedgerProofRequest ledger_proof_request = 24;
        RpcLedgerProofReply ledger_proof_reply = 25;
        RpcBlockHeadersRequest block_headers_request = 26;
        RpcBlockHeadersReply block_headers_reply = 27;
        RpcGetTransactionRequest transaction_request = 28;
        RpcGetTransactionReply transaction_reply = 29;
        RpcGetVeriBlockPublicationsRequest veriblock_publications_request = 30;
        RpcGetVeriBlockPublicationsReply veriblock_publications_reply = 31;
        RpcGetDebugVtbsRequest debug_vtb_request = 32;
        RpcGetDebugVtbsReply debug_vtb_reply = 33;
        RpcGetStateInfoRequest state_info_request = 35;
        RpcGetStateInfoReply state_info_reply = 36;
        RpcGetVtbsForBtcBlocksRequest vtb_for_btc_request = 37;
        RpcGetVtbsForBtcBlocksReply vtb_for_btc_reply = 38;
        RpcGetLastBitcoinFinalizedBlockRequest last_btc_finalized_block_request = 39;
        RpcGetLastBitcoinFinalizedBlockReply last_btc_finalized_block_reply = 40;
    }
    string id = 11;
    bool acknowledge = 12;
    string request_id = 34;
}
// --------------------------------------------------------------------

message RpcNodeRequest {
    repeated RpcEndpoint endpoint = 1;
}

message RpcStartPoolRequest {
    bytes type = 1 [(utf8_encoded)=true];
}

message RpcStartPoolReply {
    bool success = 1;
    repeated RpcResult results = 2;
}

message RpcStopPoolRequest {
}

message RpcStopPoolReply {
    bool success = 1;
    repeated RpcResult results = 2;
}

message RpcRestartPoolWebServerRequest {
}

message RpcRestartPoolWebServerReply {
    bool success = 1;
    repeated RpcResult results = 2;
}


message RpcGetPopRequest {
    int32 block_num = 1;
}

message RpcGetPopReply {
    bool success = 1;
    repeated RpcResult results = 2;
    int32 block_height = 3;
    int32 version = 4;
    bytes previous_block_hash = 5 [(hex_encoded)=true];
    bytes second_previous_block_hash = 6 [(hex_encoded)=true];
    bytes third_previous_block_hash = 7 [(hex_encoded)=true];
    bytes merkle_root = 8;
    int32 timestamp = 9;
    int32 encoded_difficulty = 10;
    sint64 nonce = 11;
    bytes pop_miner_address = 12 [(address_encoded)=true];
    bytes full_pop = 13 [(hex_encoded)=true];
    RpcBitcoinBlockHeader last_known_block = 14;
    repeated RpcBitcoinBlockHeader last_known_block_context = 15;
}

message RpcGetInfoRequest {
}

message RpcGetDiagnosticInfoRequest {
}

message RpcGetBalanceRequest {
    repeated bytes addresses = 1 [(address_encoded)=true];
}

message RpcGetBalanceReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcAddressBalance confirmed = 3;
    repeated RpcOutput unconfirmed = 4;
    int64 total_confirmed = 5;
    int64 total_unconfirmed = 6;
}

message RpcSubmitRawTransactionRequest {
    // pre-created, signed transaction body
    // (serialized with byte[] Transaction.serialize())
    bytes transaction = 1 [(hex_encoded)=true];
    // transaction type
    RpcTransaction.Type type = 2;
}

message RpcSubmitPopRequest {
    bytes endorsed_block_header = 1 [(hex_encoded)=true];
    bytes bitcoin_transaction = 2 [(hex_encoded)=true];
    bytes bitcoin_merkle_path_to_root = 3 [(hex_encoded)=true];
    RpcBitcoinBlockHeader bitcoin_block_header_of_proof = 4;
    repeated RpcBitcoinBlockHeader context_bitcoin_block_headers = 5;
    bytes address = 6 [(address_encoded)=true];
}

message RpcPopEndorsement {
    bytes endorsed_block_header = 1 [(hex_encoded)=true];
    bytes bitcoin_transaction = 2 [(hex_encoded)=true];
    bytes bitcoin_merkle_path_to_root = 3 [(hex_encoded)=true];
    RpcBitcoinBlockHeader bitcoin_block_header_of_proof = 4;
    bytes address = 5 [(address_encoded)=true];
}

message RpcGetEndorsementsOfBlockRequest {
    RpcBlockFilter filter = 1;
}

message RpcGetEndorsementsOfBlockReply {
    bool success = 1;
    repeated RpcPopEndorsement endorsements = 2;
}

message RpcSendCoinsRequest {
    bytes source_address = 1 [(address_encoded)=true];
    repeated RpcOutput amounts = 2;
    bool take_fee_from_outputs = 3;
}

message RpcSendCoinsReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated bytes tx_ids = 3 [(hex_encoded)=true];
}

message RpcCreateTransactionRequest {
    bytes source_address = 1 [(address_encoded)=true];
    repeated RpcOutput amounts = 2;
    bool take_fee_from_outputs = 3;
}

message RpcCreateTransactionReply {
    bool success = 1;
    repeated RpcResult results = 2;
    RpcTransaction transaction = 3;
    int64 signature_index = 4;
}

message RpcCreateAltChainEndorsementRequest {
    bytes publication_data = 1 [(hex_encoded)=true];
    bytes source_address = 2 [(address_encoded)=true];
    int64 fee_per_byte = 3;
    int64 max_fee = 4;
}

message RpcGetAltChainPopEndorsementsRequest {
    bytes block_hash = 1 [(hex_encoded)=true];
    int64 altchain_identifier = 2;
}

message RpcGetAltChainPopEndorsementsReply {
    bool success = 1;
    repeated RpcResult results = 2;
    bytes block_hash = 3 [(hex_encoded)=true];
    repeated RpcAltchainPopEndorsement altchain_pop_endorsements = 4;
}

message RpcGetHistoryRequest {
    repeated bytes addresses = 1 [(address_encoded)=true];
}

message RpcAddressHistory {
    bytes address = 1 [(address_encoded)=true];
    int64 balance = 2;
    int32 blocks_mined = 3;
    repeated RpcTransactionInfoUnion confirmed_transactions = 4;
    repeated RpcTransactionInfoUnion pending_transactions = 5;
}

message RpcGetHistoryReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcAddressHistory addresses = 3;
}

message RpcGetPeerInfoRequest {
}

message RpcNodeHeight {
    string peer = 1;
    int32 height = 2;
}

message RpcGetPeerInfoReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcEndpoint endpoints = 3;
    repeated RpcNodeInfo connected_nodes = 4;
    repeated RpcNodeInfo disconnected_nodes = 5;
    repeated RpcNodeInfo candidate_nodes = 6;
    repeated RpcNodeHeight node_heights = 7;
}

message RpcGetBlockchainsRequest {
}

message RpcGetBlockchainsReply {
    bool success = 1;
    repeated RpcResult results = 2;
    int32 best_blockchain_length = 3;
    int32 longest_blockchain_length = 4;
}

message RpcSubmitBlocksRequest {
    repeated RpcBlock blocks = 1;
}

message RpcGetBlockTimesRequest {
    int32 history_length = 1;
}

message RpcGetBlockTimesReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated sint32 times = 3;
}

message RpcStartSoloPoolRequest {
    bytes address = 1 [(address_encoded)=true];
}

message RpcStartSoloPoolReply {
    bool success = 1;
    repeated RpcResult results = 2;
}

message RpcGetSignatureIndexRequest {
    repeated bytes addresses = 1 [(address_encoded)=true];
}

message RpcSetDefaultAddressRequest {
    bytes address = 1 [(address_encoded)=true];
}

message RpcAddressSignatureIndexes {
    bytes address = 1 [(address_encoded)=true];
    int64 pool_index = 3;
    int64 blockchain_index = 2;
}

message RpcGetSignatureIndexReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcAddressSignatureIndexes indexes = 3;
}

message RpcSetDefaultAddressReply {
    bool success = 1;
    repeated RpcResult results = 2;
}

message RpcGetTransactionsRequest {
    int32 search_length = 1;
    repeated bytes ids = 2 [(hex_encoded)=true];
}

message RpcGetTransactionRequest {
    bytes id = 1 [(hex_encoded)=true];
}

message RpcGetTransactionReply {
    bool success = 1;
    repeated RpcResult results = 2;
    RpcTransactionInfo transaction = 3;
}

message RpcGetLastBitcoinFinalizedBlockRequest {
    int32 bitcoinConfirmations = 1;
}

message RpcGetLastBitcoinFinalizedBlockReply {
    bool success = 1;
    repeated RpcResult results = 2;
    RpcGetLastBitcoinFinalizedBlockInfo last_btc_finalized_block = 3;
}

message RpcGetLastBitcoinFinalizedBlockInfo {
    int32 height = 1;
    bytes hash = 2 [(hex_encoded)=true];
    bool known = 3;
    bool pop_verified = 4;
    RpcVerifiedOrEndorsedInInfo verified_in = 5;
    RpcVerifiedOrEndorsedInInfo endorsed_in = 6;
    int32 sp_finality = 7;
    int32 bitcoin_finality = 8;
    bool is_attack_in_progress = 9;
}

message RpcTransactionInfo {
    int32 confirmations = 1;
    RpcTransaction transaction = 2;
    int32 block_number = 3;
    int32 timestamp = 4;
    bytes endorsed_block_hash = 5 [(hex_encoded) = true];
    bytes bitcoin_block_hash = 6 [(hex_encoded) = true];
    bytes bitcoin_tx_id = 7 [(hex_encoded) = true];
    int32 bitcoin_confirmations = 8;
    bytes block_hash = 9 [(hex_encoded) = true];
    string merkle_path = 10;
}

message RpcVerifiedOrEndorsedInInfo {
    int32 height = 1;
    bytes hash = 2 [(hex_encoded)=true];
}

message RpcGetTransactionsReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcTransactionInfo transactions = 3;
}

message RpcSetTransactionFeeRequest {
    int64 amount = 1;
}

message RpcDumpPrivateKeyRequest {
    bytes address = 1 [(address_encoded)=true];
}

message RpcDumpPrivateKeyReply {
    bool success = 1;
    repeated RpcResult results = 2;
    bytes address = 3 [(address_encoded)=true];
    bytes private_key = 4 [(hex_encoded)=true];
}

message RpcImportPrivateKeyRequest {
    bytes private_key = 1 [(hex_encoded)=true];
}

message RpcImportPrivateKeyReply {
    bool success = 1;
    repeated RpcResult results = 2;
    bytes resultant_address = 3 [(address_encoded)=true];
}

message RpcGetLastBitcoinBlockRequest {
}

message RpcGetLastBlockRequest {
}

message RpcGetLastBitcoinBlockReply {
    bool success = 1;
    repeated RpcResult results = 2;
    bytes header = 3 [(hex_encoded)=true];
    int32 height = 4;
    bytes hash = 5 [(hex_encoded)=true];
}

message RpcGetLastBitcoinBlockAtVeriBlockBlockRequest {
    bytes vbk_block_hash = 1 [(hex_encoded)=true];
}

message RpcGetLastBitcoinBlockAtVeriBlockBlockReply {
    bool success = 1;
    repeated RpcResult results = 2;
    bytes header = 3 [(hex_encoded)=true];
    int32 height = 4;
    bytes hash = 5 [(hex_encoded)=true];
}

message RpcGetLastBlockReply {
    bool success = 1;
    repeated RpcResult results = 2;
    RpcBlockHeader header = 3;
}

message RpcListBlocksSinceRequest {
    bytes hash = 1 [(hex_encoded)=true];
}

message RpcListBlocksSinceReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcBlockHeader removed = 3;
    repeated RpcBlockHeader added = 4;
}

message RpcSubmitTransactionsRequest {
    repeated RpcTransactionUnion transactions = 1;
}

message RpcGetInfoReply {
    bool success = 1;
    repeated RpcResult results = 2;
    int32 number_of_blocks = 3;
    RpcBlockSummary last_block = 4;
    RpcAddressBalance default_address = 5;
    int64 transaction_fee = 6;
    int64 estimated_hashrate = 7;
    fixed64 decoded_difficulty = 8;
}

message RpcGetDiagnosticInfoReply {
    bool success = 1;
    repeated RpcResult results = 2;

    string user_language = 3;
    string java_runtime_name = 4;
    string sun_boot_library_path = 5;
    string java_runtime_version = 6;
    string java_specification_version = 7;
    string os_name = 8;
    string os_arch = 9;
    string os_version = 10;
    string memory_total_gb = 11;
    string memory_max_gb = 12;
    string processor_count = 13;
    string processor_type = 14;
    string working_directory = 15;
    string datetime_now_utc = 16;

    string nodecore_properties_source = 17;
    repeated string nodecore_properties_values = 18;
    string nodecore_start_commandline = 19;
    repeated string environment_variables = 20;

    string process_cpu_load = 21;
    string system_cpu_load = 22;
    string disk_free_space = 23;
    string disk_total_space = 24;
}

message RpcGetPendingTransactionsRequest {
}

message RpcGetPendingTransactionsReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcTransaction transactions = 3;
}

message RpcGetNewAddressRequest {
    int32 count = 1;
}

message RpcGetNewAddressReply {
    bool success = 1;
    repeated RpcResult results = 2;
    bytes address = 3 [(address_encoded)=true];
    repeated bytes additional_addresses = 4 [(address_encoded)=true];
}

message RpcValidateAddressRequest {
    bytes address = 1 [(address_encoded)=true];
}

message RpcValidateAddressReply {
    bool success = 1;
    repeated RpcResult results = 2;
    bytes address = 3 [(address_encoded)=true];
    bytes public_key = 4 [(hex_encoded)=true];
    bool is_remote = 5;
}

message RpcGenerateMultisigAddressRequest {
    repeated bytes source_addresses = 1 [(address_encoded)=true];
    int32 signature_threshold_m = 2;
}

message RpcGenerateMultisigAddressReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated bytes source_addresses = 3 [(address_encoded)=true];
    int32 signature_threshold_m = 4;
    bytes multisig_address = 5 [(address_encoded)=true];
}

message RpcMakeUnsignedMultisigTxRequest {
    bytes source_multisig_address = 1 [(address_encoded)=true];
    repeated RpcOutput amounts = 2;
    int64 fee = 3;
    bytes signature_index_string = 4 [(hex_encoded)=true];
}

message RpcMakeUnsignedMultisigTxReply {
    bool success = 1;
    repeated RpcResult results = 2;
    int32 signature_threshold_m = 3;
    int32 address_composition_count_n = 4;
    RpcUnsignedMultisigTransactionWithIndex unsigned_multisig_transaction_with_index = 5;
    bytes txid = 6 [(hex_encoded)=true];
    int64 signature_index = 7;
}

message RpcSubmitMultisigTxRequest {
    RpcSignedMultisigTransaction multisig_transaction = 3;
}

message RpcSubmitMultisigTxReply {
    bool success = 1;
    repeated RpcResult results = 2;
    bytes txid = 3 [(hex_encoded)=true];
    RpcSignedMultisigTransaction signed_multisig_transaction = 4;
}

message RpcSignMessageRequest {
    bytes address = 1 [(address_encoded)=true];
    bytes message = 2 [(hex_encoded)=true];
}

message RpcSignMessageReply {
    bool success = 1;
    repeated RpcResult results = 2;
    bytes signed_message = 3 [(hex_encoded)=true];
    bytes public_key = 4 [(hex_encoded)=true];
}

message RpcGetBlockTemplateRequest {
    string mode = 1;
    repeated string capabilities = 2;
}

message RpcCandidateTransaction {
    int64 fee = 1;
    int64 weight = 2;
    bool required = 3;
    bytes tx_id = 4 [(hex_encoded)=true];
    repeated int32 depends = 5;
    RpcTransactionUnion transaction = 6;
}

message RpcGetBlockTemplateReply {
    bool success = 1;
    repeated RpcResult results = 2;
    int64 target = 3;
    int64 size_limit = 4;
    int32 block_height = 5;
    int64 coinbase_value = 6;
    int32 minimum_timestamp = 7;
    int32 current_timestamp = 8;
    repeated string mutable = 9;
    bytes previous_block_hash = 10 [(hex_encoded)=true];
    bytes second_previous_block_hash = 11 [(hex_encoded)=true];
    bytes third_previous_block_hash = 12 [(hex_encoded)=true];
    bytes previous_ledger_hash = 13 [(hex_encoded)=true];
    repeated RpcCandidateTransaction transactions = 14;
}

message RpcSetBanRequest {
    enum Command {
        ADD = 0;
        REMOVE = 1;
    }

    Command command = 1;
    string value = 2;
    string reason = 3;
    int32 expiry_timestamp = 4;
}

message RpcSetAllowedRequest {
    enum Command {
        ADD = 0;
        REMOVE = 1;
    }

    Command command = 1;
    string value = 2;
}

message RpcBlackListInfo {
    enum Type {
        ADDRESS = 0;
        NETMASK = 1;
        CIDR = 2;
    }

    int32 id = 1;
    Type type = 2;
    string value = 3;
    string reason = 4;
    int32 timestamp = 5;
    int32 expiry_timestamp = 6;
}

message RpcWhiteListInfo {
    enum Type {
        ADDRESS = 0;
        NETMASK = 1;
        CIDR = 2;
    }

    int32 id = 1;
    Type type = 2;
    string value = 3;
    int32 timestamp = 4;
}

message RpcListBannedRequest {
}

message RpcListAllowedRequest {
}

message RpcListBannedReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcBlackListInfo entries = 3;
}

message RpcListAllowedReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcWhiteListInfo entries = 3;
}

message RpcListBannedMinersRequest {
}

message RpcListBannedMinersReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated string clients = 3;
}

message RpcClearBannedRequest {
}

message RpcClearBannedMinersRequest {
}

message RpcClearAllowedRequest {
}

message RpcPingRequest{}

message RpcPingReply{}

message RpcGetBitcoinBlockIndexRequest {
    bytes block_header = 1 [(hex_encoded)=true];
    int32 search_length = 2;
}

message RpcGetWalletTransactionsRequest {
    enum Type {
        LIST = 0;
        QUERY = 1;
    }
    Type request_type = 1;
    bytes address = 2 [(address_encoded)=true];
    RpcWalletTransaction.Type transaction_type = 3;
    RpcTransactionMeta.Status status = 4;
    RpcNumericFilter amount_filter = 5;
    RpcNumericFilter timestamp_filter = 6;
    RpcPaging page = 7;
}

message RpcGetWalletTransactionsReply {
    enum CacheState {
        UNKNOWN = 0;
        BUILDING = 1;
        CURRENT = 2;
        ERRORED = 3;
    }
    RpcPaging next = 1;
    repeated RpcWalletTransaction transactions = 2;
    CacheState cache_state = 3;
    string message = 4;
    bool success = 5;
    repeated RpcResult results = 6;
}

message RpcBlockchainStateInfo {
    enum State {
        LOADING = 0;
        NORMAL = 1;
        PAUSED = 3;
        STALE = 4;
        LOADED = 5;
    }
    State state = 1;
}

message RpcOperatingStateInfo {
    enum State {
        STARTED = 0;
        INITIALIZING = 1;
        RUNNING = 2;
        TERMINATING = 3;
    }
    State state = 1;
}

message RpcNetworkStateInfo {
    enum State {
        DISCONNECTED = 0;
        CONNECTED = 1;
    }
    State state = 1;
}

message RpcGetStateInfoRequest {}

message RpcGetStateInfoReply {
    enum WalletState {
        DEFAULT = 0;
        LOCKED = 1;
        UNLOCKED = 2;
    }
    RpcBlockchainStateInfo blockchain_state = 1;
    RpcOperatingStateInfo operating_state = 2;
    RpcNetworkStateInfo network_state = 3;
    int32 connected_peer_count = 4;
    string current_sync_peer = 5;
    int32 network_height = 6;
    int32 local_blockchain_height = 7;
    bool success = 8;
    repeated RpcResult results = 9;
    string network_version = 10;
    string data_directory = 11;
    string program_version = 12;
    int64 nodecore_starttime = 13;
    int32 wallet_cache_sync_height = 14;
    WalletState wallet_state = 15;
    int32 normal_mempool_size = 16;
    int32 pop_mempool_size = 17;
    int32 high_sig_index_mempool_size = 18;
    int32 wallet_address_count = 19;
}

message RpcStopNodeCoreRequest {}

message RpcRefreshWalletCacheRequest {}

message RpcEncryptWalletRequest {
    string passphrase = 1;
}

message RpcDecryptWalletRequest {
    string passphrase = 1;
}

message RpcUnlockWalletRequest {
    string passphrase = 1;
}

message RpcLockWalletRequest {}

message RpcDrainAddressRequest {
    bytes source_address = 1 [(address_encoded)=true];
    bytes destination_address = 2 [(address_encoded)=true];
}

message RpcDrainAddressReply {
    bool success = 1;
    repeated RpcResult results = 2;
    RpcTransaction transaction = 3;
}

message RpcBalanceUnlockEvent {
    int32 block_height = 1;
    int64 amount_unlocked = 2;
    int64 locked_balance = 3;
}

message RpcAddressBalanceSchedule {
    bytes address = 1 [(address_encoded)=true];
    int64 unlock_balance = 2;
    int64 locked_balance = 3;
    int64 total_balance = 4;
    repeated RpcBalanceUnlockEvent schedule = 5;
}

message RpcGetBalanceUnlockScheduleRequest {
    repeated bytes addresses = 1 [(address_encoded)=true];
}

message RpcGetBalanceUnlockScheduleReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcAddressBalanceSchedule address_schedule = 3;
}

message RpcPoolConfiguration {
    bool solo = 1;
    string type = 2;
    string pool_target = 3;
    string pool_address = 4;
    string operator_address = 5;
    double operator_fee = 6;
    string coinbase_comment = 7;
}

message RpcPoolStats {
    int32 current_round = 1;
    int32 mining_block_number = 2;
    int32 last_block_number = 3;
    string recent_hash_rate = 4;
}

message RpcGetPoolStateRequest {}

message RpcGetPoolStateReply {
    bool success = 1;
    repeated RpcResult results = 2;
    bool running = 3;
    RpcPoolConfiguration configuration = 4;
    RpcPoolStats stats = 5;
}

message RpcVeriBlockPublication {
    RpcSignedTransaction pop_transaction = 1;
    string compact_merkle_path = 2;
    bytes containing_block = 3 [(hex_encoded)=true];
    repeated bytes context_to_endorsed = 4 [(hex_encoded)=true];
    repeated bytes context_to_containing = 5 [(hex_encoded)=true];
    bytes block_of_proof = 6 [(hex_encoded)=true];
}

message RpcGetVeriBlockPublicationsRequest {
    bytes keystone_hash = 1 [(hex_encoded)=true];
    bytes context_hash = 2 [(hex_encoded)=true];
    bytes btc_context_hash = 3 [(hex_encoded)=true];
}

message RpcGetVeriBlockPublicationsReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcVeriBlockPublication publications = 3;
}

message RpcGetDebugVtbsRequest {
    bytes vbk_context_hash = 1 [(hex_encoded)=true];
    bytes btc_context_hash = 2 [(hex_encoded)=true];
}

message RpcGetDebugVtbsReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcVeriBlockPublication publications = 3;
}

message RpcGetVtbsForBtcBlocksRequest {
    repeated bytes btc_block_hashes = 1 [(hex_encoded)=true];
}

message RpcGetVtbsForBtcBlocksReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcVeriBlockPublication publications = 3;
}

message RpcGetContainingVtbsRequest {
    bytes vbk_block_hash = 1 [(hex_encoded)=true];
}

message RpcGetContainingVtbsReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcVeriBlockPublication publications = 3;
}

message RpcAddressIndexPair {
    bytes address = 1 [(address_encoded) = true];
    int64 starting_signature_index = 2;
}

message RpcAbandonAddressTransactionsRequest {
    repeated RpcAddressIndexPair addresses = 1;
}

message RpcAbandonTransactionRequest {
    oneof transactions_to_abandon {
        RpcTransactionSet txids = 1;
        RpcAbandonAddressTransactionsRequest addresses = 2;
    }
}

message RpcAbandonTransactionReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcTransactionUnion abandoned_transactions = 3;
    repeated bytes txids_not_abandoned = 4;
}

message RpcRebroadcastAddressTransactionsRequest {
    repeated RpcAddressIndexPair addresses = 1;
}
message RpcRebroadcastTransactionRequest {
    oneof transactions_to_rebroadcast {
        RpcTransactionSet txids = 1;
        RpcRebroadcastAddressTransactionsRequest addresses = 2;
    }
}

message RpcRebroadcastTransactionReply {
    bool success = 1;
    repeated RpcResult results = 2;
    repeated RpcTransactionUnion rebroadcast_transactions = 3;
    repeated bytes txids_not_rebroadcast = 4;
}

message RpcGenerateBlocksRequest {
    int32 blocks = 1;
    string address = 2;
}

message RpcGenerateBlocksReply {
    RpcResult result = 1;
    repeated bytes hash = 2 [(hex_encoded)=true];
}

service Admin {
    rpc SubmitRawTransaction(RpcSubmitRawTransactionRequest) returns (RpcProtocolReply) {}

    rpc GenerateBlocks(RpcGenerateBlocksRequest) returns (RpcGenerateBlocksReply) {}

    rpc GetPop(RpcGetPopRequest) returns (RpcGetPopReply) {}

    rpc AddNode(RpcNodeRequest) returns (RpcProtocolReply) {}

    rpc SetBan(RpcSetBanRequest) returns (RpcProtocolReply) {}

    rpc GetInfo(RpcGetInfoRequest) returns (RpcGetInfoReply) {}

    rpc GetDiagnosticInfo(RpcGetDiagnosticInfoRequest) returns (RpcGetDiagnosticInfoReply) {}

    rpc RemoveNode(RpcNodeRequest) returns (RpcProtocolReply) {}

    rpc StopPool(RpcStopPoolRequest) returns (RpcStopPoolReply) {}

    rpc SubmitPop(RpcSubmitPopRequest) returns (RpcProtocolReply) {}

    rpc SendCoins(RpcSendCoinsRequest) returns (RpcSendCoinsReply) {}

    rpc CreateTransaction(RpcCreateTransactionRequest) returns (RpcCreateTransactionReply) {}

    rpc CreateAltChainEndorsement(RpcCreateAltChainEndorsementRequest) returns (RpcCreateTransactionReply) {}

    rpc GetAltChainPopEndorsements(RpcGetAltChainPopEndorsementsRequest) returns (RpcGetAltChainPopEndorsementsReply) {}

    rpc GetBlocks(RpcGetBlocksRequest) returns (RpcGetBlocksReply) {}

    rpc StartPool(RpcStartPoolRequest) returns (RpcStartPoolReply) {}

    rpc RestartPoolWebServer(RpcRestartPoolWebServerRequest) returns (RpcRestartPoolWebServerReply) {}

    rpc GetHistory(RpcGetHistoryRequest) returns (RpcGetHistoryReply) {}

    rpc GetBalance(RpcGetBalanceRequest) returns (RpcGetBalanceReply) {}

    rpc SetAllowed(RpcSetAllowedRequest) returns (RpcProtocolReply) {}

    rpc ListBanned(RpcListBannedRequest) returns (RpcListBannedReply) {}

    rpc ListBannedMiners(RpcListBannedMinersRequest) returns (RpcListBannedMinersReply) {}

    rpc ClearBanned(RpcClearBannedRequest) returns (RpcProtocolReply) {}

    rpc ClearBannedMiners(RpcClearBannedMinersRequest) returns (RpcProtocolReply) {}

    rpc SubmitBlocks(RpcSubmitBlocksRequest) returns (RpcProtocolReply) {}

    rpc ClearAllowed(RpcClearAllowedRequest) returns (RpcProtocolReply) {}

    rpc GetPeerInfo(RpcGetPeerInfoRequest) returns (RpcGetPeerInfoReply) {}

    rpc SignMessage(RpcSignMessageRequest) returns (RpcSignMessageReply) {}

    rpc ListAllowed(RpcListAllowedRequest) returns (RpcListAllowedReply) {}

    rpc BackupWallet(RpcBackupWalletRequest) returns (RpcBackupWalletReply) {}

    rpc ImportWallet(RpcImportWalletRequest) returns (RpcImportWalletReply) {}

    rpc GetNewAddress(RpcGetNewAddressRequest) returns (RpcGetNewAddressReply) {}

    rpc GetBlockTimes(RpcGetBlockTimesRequest) returns (RpcGetBlockTimesReply) {}

    rpc StartSoloPool(RpcStartSoloPoolRequest) returns (RpcStartSoloPoolReply) {}

    rpc GetBlockchains(RpcGetBlockchainsRequest) returns (RpcGetBlockchainsReply) {}

    rpc SetTransactionFee(RpcSetTransactionFeeRequest) returns (RpcProtocolReply) {}

    rpc DumpPrivateKey(RpcDumpPrivateKeyRequest) returns (RpcDumpPrivateKeyReply) {}

    rpc ImportPrivateKey(RpcImportPrivateKeyRequest) returns (RpcImportPrivateKeyReply) {}

    rpc SubmitTransactions(RpcSubmitTransactionsRequest) returns (RpcProtocolReply) {}

    rpc GetTransactions(RpcGetTransactionsRequest) returns (RpcGetTransactionsReply) {}

    rpc GetLastBitcoinFinalizedBlock(RpcGetLastBitcoinFinalizedBlockRequest) returns (RpcGetLastBitcoinFinalizedBlockReply) {}

    rpc ValidateAddress(RpcValidateAddressRequest) returns (RpcValidateAddressReply) {}

    rpc GenerateMultisigAddress(RpcGenerateMultisigAddressRequest) returns (RpcGenerateMultisigAddressReply) {}

    rpc MakeUnsignedMultisigTx(RpcMakeUnsignedMultisigTxRequest) returns (RpcMakeUnsignedMultisigTxReply) {}

    rpc SubmitMultisigTx(RpcSubmitMultisigTxRequest) returns (RpcSubmitMultisigTxReply) {}

    rpc GetBitcoinBlockIndex(RpcGetBitcoinBlockIndexRequest) returns (RpcProtocolReply){}

    rpc GetBlockTemplate(RpcGetBlockTemplateRequest) returns (RpcGetBlockTemplateReply) {}

    rpc GetSignatureIndex(RpcGetSignatureIndexRequest) returns (RpcGetSignatureIndexReply) {}

    rpc SetDefaultAddress(RpcSetDefaultAddressRequest) returns (RpcSetDefaultAddressReply) {}

    rpc GetLastBitcoinBlock(RpcGetLastBitcoinBlockRequest) returns (RpcGetLastBitcoinBlockReply) {}

    rpc GetLastBitcoinBlockAtVeriBlockBlock(RpcGetLastBitcoinBlockAtVeriBlockBlockRequest) returns (RpcGetLastBitcoinBlockAtVeriBlockBlockReply) {}

    rpc GetProtectedChildren(RpcGetProtectedChildrenRequest) returns (RpcGetProtectedChildrenReply) {}

    rpc GetProtectingParents(RpcGetProtectingParentsRequest) returns (RpcGetProtectingParentsReply) {}

    rpc GetWalletTransactions(RpcGetWalletTransactionsRequest) returns (RpcGetWalletTransactionsReply) {}

    rpc GetEndorsementsOfBlock(RpcGetEndorsementsOfBlockRequest) returns (RpcGetEndorsementsOfBlockReply) {}

    rpc GetPendingTransactions(RpcGetPendingTransactionsRequest) returns (RpcGetPendingTransactionsReply) {}

    rpc GetPopEndorsementsInfo(RpcGetPopEndorsementsInfoRequest) returns (RpcGetPopEndorsementsInfoReply) {}

    rpc GetPopRewardEstimates(RpcGetPopRewardEstimatesRequest) returns (RpcGetPopRewardEstimatesReply) {}

    rpc Ping(RpcPingRequest) returns (RpcPingReply) {}

    rpc GetStateInfo(RpcGetStateInfoRequest) returns (RpcGetStateInfoReply) {}

    rpc GetLastBlock(RpcGetLastBlockRequest) returns (RpcGetLastBlockReply) {}

    rpc ListBlocksSince(RpcListBlocksSinceRequest) returns (RpcListBlocksSinceReply) {}

    rpc TroubleshootPopTransactions(RpcTroubleshootPopTransactionsRequest) returns (RpcTroubleshootPopTransactionsReply) {}

    rpc StopNodeCore(RpcStopNodeCoreRequest) returns (RpcProtocolReply) {}

    rpc RefreshWalletCache(RpcRefreshWalletCacheRequest) returns (RpcProtocolReply) {}

    rpc EncryptWallet(RpcEncryptWalletRequest) returns (RpcProtocolReply) {}

    rpc DecryptWallet(RpcDecryptWalletRequest) returns (RpcProtocolReply) {}

    rpc UnlockWallet(RpcUnlockWalletRequest) returns (RpcProtocolReply) {}

    rpc LockWallet(RpcLockWalletRequest) returns (RpcProtocolReply) {}

    rpc DrainAddress(RpcDrainAddressRequest) returns (RpcDrainAddressReply) {}

    rpc GetBalanceUnlockSchedule(RpcGetBalanceUnlockScheduleRequest) returns (RpcGetBalanceUnlockScheduleReply) {}

    rpc GetPoolState(RpcGetPoolStateRequest) returns (RpcGetPoolStateReply) {}

    rpc GetVeriBlockPublications(RpcGetVeriBlockPublicationsRequest) returns (RpcGetVeriBlockPublicationsReply) {}

    rpc GetDebugVtbs(RpcGetDebugVtbsRequest) returns (RpcGetDebugVtbsReply) {}

    rpc RpcGetVtbsForBtcBlocks(RpcGetVtbsForBtcBlocksRequest) returns (RpcGetVtbsForBtcBlocksReply) {}

    rpc AbandonTransaction(RpcAbandonTransactionRequest) returns (RpcAbandonTransactionReply) {}

    rpc RebroadcastTransaction(RpcRebroadcastTransactionRequest) returns (RpcRebroadcastTransactionReply) {}
}
